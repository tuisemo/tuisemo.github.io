{"meta":{"title":"慎独","subtitle":"感性是神圣的天赋，理性则像忠诚的仆人。","description":"欲语还休","author":"慎独","url":"http://yoursite.com"},"pages":[{"title":"标签集","date":"2017-11-04T08:47:39.115Z","updated":"2017-11-04T08:47:39.115Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"凤梨罐头的爱情","slug":"凤梨罐头的爱情","date":"2018-07-08T12:38:00.000Z","updated":"2018-09-15T13:15:08.504Z","comments":true,"path":"2018/07/08/凤梨罐头的爱情/","link":"","permalink":"http://yoursite.com/2018/07/08/凤梨罐头的爱情/","excerpt":"","text":"感情像是有保质期的凤梨罐头，过期了就过期了。但是，感情那么珍贵，往往发现过期了，你还是希望打开它再尝一口，坏没坏，能不能接收，都是看个人的。 我去看了《我不是药神》，坦白讲有个泪点一度戳中了我，当时在影院里只沉浸在剧情里，很动容，后面回家的路上又接着联想了很多。 那个场景就是 被搜出有“假药”的病人都被抓进了局子里盘问，警察逼问着让他们供出卖“假药”的人，最后一位白发苍苍的患者带着哭腔求情说道：”领导，求你一件事。求求你们别再查了。这药假不假，病人自己能不知道吗？” 是啊，药的真假在医学有严格复杂的评定标准，但对于真正的病人而言，能治病救命的药，就是实实在在的“真”。 我突然想起了关于保质期的问题，我买了很多酸奶，他们都只有25天的保质期，眼看着明天就要过期了，可是我也不可能在今天晚上把剩下的所有酸奶都喝完，我在犹豫着，是否过了今晚，在时钟的时针像12点偏转的那一刻，它们就会有一个本质的变化。我告诉自己，是不会的。 隔天的早晨，我开了杯酸奶，尝了一口，发现其实并没有想象中糟糕，让它口味变差的原因可能更多的是保质期对于我的心理作用。 保质期在告诉我，它过期了，你不能再食用它了。但我的亲自尝试告诉我，其实是可以接受的。 王家卫在《重庆森林》里拿着凤梨罐头比喻爱情，保质期一过，就该放弃了。但我想，在爱情里，多数人还是不做不到像金城武那样帅气洒脱，即便感情像是有保质期的凤梨罐头，过期了就过期了。但是，感情那么珍贵，往往发现过期了，你还是希望打开它再尝一口，坏没坏，能不能接收，都是看个人的。 以前我有瓶凤梨罐头保质期在6月1日，永久过期了。","categories":[{"name":"闲谈","slug":"chat","permalink":"http://yoursite.com/categories/chat/"}],"tags":[]},{"title":"MongoDB安装","slug":"MongoDB安装","date":"2017-09-27T12:35:57.000Z","updated":"2017-11-04T08:47:39.084Z","comments":true,"path":"2017/09/27/MongoDB安装/","link":"","permalink":"http://yoursite.com/2017/09/27/MongoDB安装/","excerpt":"","text":"下载MongoDB废话不多说，上地址点这里。 安装MongoDB双击打开安装包，一路next，知道选择安装方式时，建议可以选择“Custom”模式自定义,系统默认安装路径是C:\\Program Files\\MongoDB\\Server\\3.4\\，这里个人习惯就更改为D:\\Program Files\\MongoDB\\Server\\3.4\\了，继续next，直至完成。这里有另一个建议，就是直接在根目录下安装，即：D\\MongoDB\\，这个一会儿下面会提到 创建数据存放目录MongoDB将数据目录存储在 db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\\ 或者 D:\\ 等 )。上面的说明摘抄于菜鸟教程,在网上找了很久，一直不明白为什么强调要将数据存储目录创建在根目录下，或许是考虑要提高数据交互效率？较少路径索引所消耗的时间？ 鉴于刚才我已经把MongoDB安装在D:\\Program Files\\MongoDB\\Server\\3.4\\路径下，所以我创建的数据目录为D:\\Program Files\\MongoDB\\Server\\3.4\\data\\db，同时，我还创建了一个日志目录，并新建了个空文件MongoDB.log，用于存放软件运行中的日志文件D:\\Program Files\\MongoDB\\Server\\3.4\\data\\log\\MongoDB.log 运行MongoDB在安装目录的bin\\目录（D:\\Program Files\\MongoDB\\Server\\3.4\\bin\\）中打开命令工具,运行以下代码：mongod --dbpath D:\\Program Files\\MongoDB\\Server\\3.4\\data\\dbdbpath后面的存储路径以你的实际安装路径为准 命令行出现相应的信息，即正常运行。 将MongoDB作为Windows服务运行 参数 描述 –bind_ip 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP –logpath 定MongoDB日志文件，注意是指定文件不是目录 –logappend 使用追加的方式写日志 –dbpath 指定数据库路径 –port 指定服务端口号，默认端口27017 –serviceName 指定服务名称 –serviceDisplayName 指定服务名称，有多个mongodb服务时执行。 –install 指定作为一个Windows服务安装。 在管理员下执行以下命令： mongod.exe --logpath &quot;D:\\Program Files\\MongoDB\\Server\\3.4\\data\\log\\MongoDB.log&quot; --logappend --dbpath &quot;D:\\Program Files\\MongoDB\\Server\\3.4\\data\\db&quot; --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install 以上的YourServiceName是由你自定义的服务名称。 小技巧在网上也有看到有人创建了一个mongodb.conf文件，将各个配置放在这个文件中，最后执行mongod --config &quot;Your mongodb.conf address&quot;和mongod --config &quot;Your mongodb.conf address&quot; --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install 这种方法看着更容易理解，也方便配置，对于不擅长敲命令行的小伙伴们还是挺不错的选择，不过我自己还没试过。 再次以windows服务方式运行MongoDB随便打开命令窗口： net start MongoDB MongoDB即是你刚才设置的服务名称","categories":[],"tags":[]},{"title":"sublime使用常见问题","slug":"sublime使用常见问题","date":"2017-09-19T07:51:19.000Z","updated":"2017-11-04T08:47:39.099Z","comments":true,"path":"2017/09/19/sublime使用常见问题/","link":"","permalink":"http://yoursite.com/2017/09/19/sublime使用常见问题/","excerpt":"","text":"Package install 包管理安装失败sublime使用中，时常因为网络问题，导致Package install安装失败，程序提示：there are no packages for installation导致插件无法正常获取安装。解决方案如下： 打开命令提示符，输入ping sublime.wbond.net回车，此处ping通sublime.wbond.net获取网站ip地址，（访问 :sublime.wbond.net后你会发现，其实就映射到了: packagecontrol.io）上述操作后，我得到的地址是：[50.116.33.29] 修改hosts指向。在电脑中找到hosts文件，路径C:\\Windows\\System32\\drivers\\etc\\ 使用编辑器打开，在最后新增一行： 50.116.33.29 sublime.wbond.net 保存hosts文件，重启sublime即可。 关于sublime中编写Vue组件时，文档的格式化工具当我们开发vue.js的相关程序时，严格的eslint要求编码规则需完全符合才能正常运行vue工程，网上搜了一下，也没有发现合适的sublime插件专门用于格式化vue文件，后面找到一个方法： 配置HTML/CSS/JS Prettify插件正常前端开发html/js都会安装HTML/CSS/JS Prettify插件，我们仅需在原有基础上，增加一些配置，即可支持vue文件格式化。 打开sublime的tools菜单，选择HTML/CSS/JS Prettify插件，选择Plugin Options（网上给的方案是选择prettify preference，但我并未在该配置文件里找到可配置项） 打开默认配置文件，或者你可以打开用户配置，找到”global_file_rules”这一项，你会发现有html/js/css/json等格式化规则（这些规则可在prettify preference里调整），每个规则会有对应”allowed_file_extensions”，表示规则支持的文件拓展类型。 将”vue”添加进刚才的”allowed_file_extensions”,这里我在html/js均添加了对vue文件的支持，大家可以自己决定。 至此，在vue文件中执行HTML/CSS/JS Prettify也可以完成对代码的格式化了。","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://yoursite.com/categories/big-front-end/"}],"tags":[{"name":"工具","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"gulp常用插件集合","slug":"gulp常用插件集合","date":"2017-09-12T00:56:51.000Z","updated":"2017-11-04T08:47:39.099Z","comments":true,"path":"2017/09/12/gulp常用插件集合/","link":"","permalink":"http://yoursite.com/2017/09/12/gulp常用插件集合/","excerpt":"","text":"gulp-jshint js语法检测var jshint = require(&apos;gulp-jshint&apos;); gulp-jshint html语法检测var htmlhint = require(&apos;gulp-htmlhint&apos;); gulp-less less编译var less = require(&apos;gulp-less&apos;); gulp-rename 文件重命名var rename = require(&apos;gulp-rename&apos;); gulp-file-include 文件、代码段插入var fileinclude = require(&apos;gulp-file-include&apos;); gulp.task(&apos;fileinclude&apos;, function() { gulp.src(&apos;./src/*.html&apos;) .pipe(fileinclude({ prefix: &apos;&lt;!--IEhack@&apos;,//标签语法前缀 suffix: &apos;--&gt;&apos;,//标签语法后缀，最终在文档完整标签为：&lt;!--IEhack@include(&apos;./include/IEhack.html&apos;)--&gt; basepath: &apos;@file&apos;,//插入文件地址 indent: true })) .pipe(gulp.dest(&apos;dist&apos;)); }); gulp-inject html中插入js/cssvar inject = require(&apos;gulp-inject&apos;); gulp.task(&apos;inject&apos;, function() { gulp.src(&apos;./src/*.html&apos;) .pipe(inject(gulp.src([&apos;./src/js/lib/require.js&apos;], { reda: false }), { starttag: &apos;&lt;!-- inject:require:{{ext}} --&gt;&apos;, relative: true }))//最终在文档展示:&lt;!-- inject:base:css --&gt; .pipe(gulp.dest(&apos;dist&apos;)); }); gulp-clean-css css压缩var cssmin = require(&apos;gulp-clean-css&apos;); gulp.task(&apos;cssmin&apos;, function() { return gulp.src(&apos;./src/css/*css&apos;) .pipe(cssmin({ compatibility: &apos;ie8&apos; //兼容至ie8模式，默认compatibility: &apos;*&apos; Internet Explorer 10+兼容模式 debug: true //启用日志打出到控制台 })) .pipe(gulp.dest(&apos;./public/css&apos;)); }) 更多详细配置可查看gulp-clean-css gulp-base64 零碎图片转base64格式图片var base64 = require(&apos;gulp-base64&apos;); gulp.task(&apos;base64&apos;, function() { return gulp.src(&apos;./src/css/*css&apos;) .pipe(base64({ baseDir: &apos;public&apos;, //当样式表中有绝对路径的图片，则baseDir将被指定为该路径的根目录（相对于gulpfile文件） extensions: [&apos;svg&apos;, &apos;png&apos;, /\\.jpg#datauri$/i], //希望转化的图片格式，支持扩展名或正则匹配 exclude: [/\\.server\\.(com|net)\\/dynamic\\//, &apos;--live.jpg&apos;], //与extensions不同，此设置项将跳过与此匹配的图片，不转化 maxImageSize: 8 * 1024, // 设置转化图片的阈值，计量单位:bytes debug: true //启用日志打出到控制台 })) .pipe(gulp.dest(&apos;./public/css&apos;)); }) gulp-imagemin 图片压缩var imagemin = require(&apos;gulp-imagemin&apos;); gulp.task(&apos;imagemin&apos;, function() { return gulp.src(&apos;./src/images/*&apos;) .pipe(imagemin()) .pipe(gulp.dest(&apos;./public/images&apos;)); }) gulp-changed 只操作有过修改的文件var changed = require(&apos;gulp-changed&apos;); gulp.task(&apos;imagemin &apos;, function() { return gulp.src(&apos;./src/images/*&apos;) .pipe(changed (&apos;./public/images&apos;))//与输入目录文件对比，若无差异则不再处理 .pipe(imagemin())//此处使用图片压缩工作流做例子 .pipe(gulp.dest(&apos;./public/images&apos;)); })","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://yoursite.com/categories/big-front-end/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"}]},{"title":"使用Hexo和GitHub搭建个人博客","slug":"使用Hexo和GitHub搭建个人博客","date":"2017-09-11T13:32:57.000Z","updated":"2017-11-04T08:47:39.099Z","comments":true,"path":"2017/09/11/使用Hexo和GitHub搭建个人博客/","link":"","permalink":"http://yoursite.com/2017/09/11/使用Hexo和GitHub搭建个人博客/","excerpt":"","text":"基础配置创建对应仓库在自己的GitHub账号下创建一个新的仓库，命名为username.github.io（username是你的github账号名) 在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。 简单来说，User Pages 与 Project Pages的区别是： User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。 用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。 User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。 User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages通过 http(s)://username.github.io/projectname 进行访问。 工具安装Git安装如果你已安装了Git，可直接跳过，如果没有，那么建议自学安装，这里跳过。 Git配置当安装完Git，建议配置用户信息（用户名/邮箱地址）。此后每次提交操作，均会携带这部分信息。git config --global user.name &quot;username&quot; git config --global user.email &quot;username@example.com&quot; 关联GitHub为了能够在本地使用git管理github上的项目，需要进行一些配置，这里介绍SSH的方法。 检查电脑是否已有SSH KEYSls -al ~/.ssh 若无SSH KEYS，则生成新的SSH KEYSssh-keygen -t rsa -C &quot;your_email@example.com&quot;默认回车，会生成两个文件：id_rsa/id_rsa.pub（前者为私钥，后者为公钥）。 向SSH-AGENT添加KEY确保ssh-agent可运行ssh-agent -s添加SSH KEYssh-add ~/.ssh/id_rsa 在GitHub添加SSH KEY打开生成的SSH KEY，用编辑器打开新生成的公钥id_rsa.pub（文件默认路劲C:/Users/Administrator/.ssh/id_rsa.pub），复制里面的字符串，添加到GitHub。 测试是否关联成功ssh -T git@github.com Hexo安装Hexo安装前请确保你的电脑已安装了Node.js/Gitnpm install hexo-cli -g或cnpm i hexo-cli -g (建议可使用淘宝镜像) Hexo站点构建选择一个空文件夹hexo init上一步操作需要一点时间，请耐心，完成后会自动在文件夹内建立网站所需要的所有文件。 接下来就是安装依赖了npm install或cnpm i (减少等待时间) 此时，网站基础demo已经构建完成，我们可通过以下两个指令运行该demohexo generate或简写指令hexo g 生成站点hexo server 运行服务，可在localhost:4000 查看站点。此时的站点仅是本地查看的站点，之后需部署至GitHub。","categories":[],"tags":[]},{"title":"我的前端环境基石——nodeJS","slug":"我的前端环境基石——nodeJS","date":"2017-07-27T10:07:52.000Z","updated":"2017-11-04T08:47:39.115Z","comments":true,"path":"2017/07/27/我的前端环境基石——nodeJS/","link":"","permalink":"http://yoursite.com/2017/07/27/我的前端环境基石——nodeJS/","excerpt":"","text":"Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。 嗯，上面这句是抄的，不重要 在前端开发工作中，很多配合工具都依赖nodejs环境，所以安装nodejs肯定是开发工作的不二选择。 nodeJs安装也比较简单，只要去nodeJs官网下载安装包（这里或推荐nodeJs中文网下载） 由于很多时候从国外的npm下载包会比较慢，没有强迫症的同学可以选择安装淘宝镜像cpnm，代码：npm install -g cnpm --registry=https://registry.npm.taobao.org以后使用cnpm命令就会自动从淘宝镜像下载相应的包了。","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://yoursite.com/categories/big-front-end/"}],"tags":[]},{"title":"工作的背包，藏着那些小而美的事物","slug":"工作的背包，藏着那些小而美的事物","date":"2017-07-26T09:12:17.000Z","updated":"2017-11-04T08:47:39.099Z","comments":true,"path":"2017/07/26/工作的背包，藏着那些小而美的事物/","link":"","permalink":"http://yoursite.com/2017/07/26/工作的背包，藏着那些小而美的事物/","excerpt":"","text":"LiceCap我已经受够了和别人无休止的远程沟通，人与人之间的语言障碍会让我失去工作的动力。 LiceCap是一个小体积的录屏软件，可以通过官方网站下载，是一款屏幕录制工具，支持导出GIF动画图片格式，轻量级、使用简单，录制过程中可以随意改变录屏范围。 PicPickPicPick是一个全功能的屏幕截图工具,直观的图像编辑器,颜色选择器,颜色调色板,像素标尺,量角器,瞄准线和白板等等。这个软件的需求点是可以滚动截屏这样就可以完整地截取整个网页。该软件可通过PicPick官网下载。 PocketPocket的主要功能就是将你要阅读或者一时没有读完的网页标记下来，接着同步到服务器端，然后你就可以在不同的设备上阅读。如果你在电脑上网的时间不多，一些东西又来不及看完，这时Pocket这款移动客户端就能按你的需求，在PC（IE，firefox，chrome等浏览器）上标记需要阅读的内容，接着可使用手机随时进行阅读！配合谷歌插件使用更方便。","categories":[{"name":"资源","slug":"resource","permalink":"http://yoursite.com/categories/resource/"}],"tags":[{"name":"工具","slug":"tools","permalink":"http://yoursite.com/tags/tools/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"编程","slug":"coding","permalink":"http://yoursite.com/tags/coding/"}]},{"title":"工欲善其事必先利其器——Sublime Text","slug":"工欲善其事必先利其器——Sublime-Text","date":"2017-07-21T03:47:50.000Z","updated":"2017-11-04T08:47:39.115Z","comments":true,"path":"2017/07/21/工欲善其事必先利其器——Sublime-Text/","link":"","permalink":"http://yoursite.com/2017/07/21/工欲善其事必先利其器——Sublime-Text/","excerpt":"","text":"安装(Installtion)下载应用程序可前往 Sublime Text 官方网站 (官网的下载速度较为感人，没耐心等的小伙伴可自行搜索资源)，目前最新版本为Sublime Text 3，虽然之前的许多插件都还停留在Sublime Text 2版本的支持上，个人建议升级到最新版本，毕竟后期插件也会迭代支持。官网提供各系统各版本下载，但本人只用过Windows，所以就按照个人为例。 安装目录可根据自己喜好更改，我的习惯是将应用软件统一安装在D盘，记住安装地址，一会儿配置环境会用到。 安装时，可勾选Add to explorer context menu，这样可将快捷方式加入右键菜单中，以便快速使用Sublime Text打开文件。 添加Sublime Text到环境变量使用win + r运行sysdm.cpl打开系统属性–高级–环境变量，找到系统变量 Path 点击编辑，将刚才的安装路径 D:\\Program Files\\Sublime Text 3添加到环境变量中。 (一直使用Sublime Text也没配置变量，感觉不配置这个也用的好好的，待以后发现需求吧~) 安装Package ControlPackage Control就像是nodejs里的npm，方便用户安装、管理、卸载插件，安装插件前必定先安装Package Control。具体安装方法在Package Control 官网也写得比较清楚，可以在线安装也可以下载到本地再配置关联，这里主要介绍一下在线安装的方法：在Sublime Text中按 ctrl + ` 调出控制台。将下面的代码粘贴到控制台中，回车，等待安装完成： import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by) 安装过程是网络环境而定，如果失败多次，建议尝试直接下载。 等待Package Control安装成功后，重启Sublime Text，使用ctrl + shift + p打开命令板，输入Package Control选择install package即可进入安装其他插件。 完成到这一步，我们基本已经可以使用Sublime Text的基础功能了，但这个编辑工具的魅力在于多样的插件，插件的合理使用才使得这个工具显得如此强大，下一步我会介绍一些平时比较常用的插件。 插件安装Package Control 官网首页一进去，就是各个插件的实时更新列表，里面根据：最新、趋势、最流行等分类展示了各种插件，使用者可以根据各自需求安装。 EmmetHTMLBeautifyAutoprefixer这个插件主要用于补全CSS样式中的各类后缀，以前写样式的时候偶尔可能会用到，不过之后改用打包构建工具之后，就不再依靠这个了。 CSS3CSScombFileDiffsHTML-CSS-JS PrettifyHTML5jQueryLESSChineseLocalizations","categories":[{"name":"前端","slug":"big-front-end","permalink":"http://yoursite.com/categories/big-front-end/"}],"tags":[{"name":"工具","slug":"tools","permalink":"http://yoursite.com/tags/tools/"}]},{"title":"Markdown入门","slug":"Markdown入门","date":"2017-07-10T03:14:05.000Z","updated":"2017-11-04T08:47:39.084Z","comments":true,"path":"2017/07/10/Markdown入门/","link":"","permalink":"http://yoursite.com/2017/07/10/Markdown入门/","excerpt":"","text":"标题1标题2标题3标题4 this is blockquote.this is an empty line 被包含的标题2 有些词汇比较重要。需要使用明显的标记符来突出显示后面是一个更重要的标记更重要的 以下是三种不同的列表写法： 001 002 003 001 002 003 001 002 003带层级关系的无序列表： 001 0001 0002 002 0001 0002 0003 003 004 有序列表的写法： 001 002 003 这是一个带链接.这是一个带title的链接 与链接不同的是，图片写法需要在方括号前面增加！例如 好了，现在开始我们的代码吧&lt; this is a html template&gt; 创建代码区块： $.ajax({ url: &apos;https://api.douban.com/v2/movie/in_theaters&apos;, type: &apos;GET&apos;, dataType: &apos;jsonp&apos;, data: {}, success: function(data) { that.lists = []; for (var i = 0; i &lt; data.subjects.length; i++) { that.lists.push({ id: data.subjects[i].id, alt: data.subjects[i].alt, imgsrc: data.subjects[i].images.medium, title: data.subjects[i].title, year: data.subjects[i].year }); } }, erroe: function() {} }); 以上结束入门部分。","categories":[],"tags":[]},{"title":"作者自白","slug":"作者自白","date":"2017-07-07T09:38:00.000Z","updated":"2017-11-04T08:47:39.099Z","comments":true,"path":"2017/07/07/作者自白/","link":"","permalink":"http://yoursite.com/2017/07/07/作者自白/","excerpt":"","text":"我听过一个故事，里面写着这样一句话，对我影响颇深“感性是神圣的天赋，理性则像忠诚的仆人，我们建立了一个荣耀仆人却遗忘了天赋的社会”","categories":[{"name":"闲谈","slug":"chat","permalink":"http://yoursite.com/categories/chat/"}],"tags":[]}]}